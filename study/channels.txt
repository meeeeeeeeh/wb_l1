Канал — это механизм связи, который, помимо прочего, позволяет горутинам обмениваться
 данными. Во-первых, каждый канал допускает обмен определенным типом данных, который 
 также называется типом элемента канала, а во-вторых, для правильной работы канала 
 вам понадобится кто-то, кто будет получать то, что отправляется по нему. 
 Новый канал можно объявить, используя make() и клю- чевое слово chan (make(chan int)),
а закрыть канал — с помощью функции close(). 
Вы можете объявить и размер канала, написав что-то вроде make(chan int, 1).


Конвейер — это виртуальный метод соединения горутин и каналов, так что выходные данные
одной горутины становятся входными данными другой, а для передачи ваших данных 
используются каналы. Одним из преимуществ использования конвейеров является то, 
то в вашей программе будет постоянный поток данных, так как ни одна горутина или 
канал не обязаны ждать завершения всего, чтобы начать выполнение. Кроме того, вы 
используете меньше перемен- ных и, следовательно, 
меньше места в памяти, так как нет необходимости со- хранять все в переменной. 

Записьзначение val в канал ch: ch <- val.
Прочитать значение из канала c можно, выполнив команду <-c. 
сохранить это значение в переменной, использовав aVar := <-c.


c := make(chan int, 1)
Этот канал имеет буфер с размером 1. 
Это означает, что, как только мы заполним буфер, мы сможем закрыть канал, 
а горутина продолжит свое выполнение и вернется. 

Канал, который не буферизован, ведет себя по-другому: когда вы отправляете значение в этот канал,
он блокируется до момента, пока кто-то получит это значение. 

Ключевое слово range работает с каналами! Однако цикл по range канала завершается только тогда, 
когда канал закрыт или использовано ключевое слово break. !!


Чтение из закрытого канала возвращает нулевое значение его типа данных. 
Но если вы попытаетесь выполнить запись в закрытый канал, ваша программа завершится ошибкой (panic). 