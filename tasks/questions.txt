1. Какой самый эффективный способ конкатенации строк?
    fmt.Sprintf предоставляет более гибкий способ конкатенации, позволяя вставлять переменные в строку
    с помощью оператора +
    strings.Builder - это более эффективный способ для конкатенации строк
    strings.Builder предварительно выделяет небольшой буфер для хранения данных и автоматически увеличивает его размер при необходимости.
    Когда добавляются новые строки методом WriteString(), strings.Builder автоматически увеличивает размер буфера, если текущий размер не достаточен для вмещения новых данных. 
    Этот процесс называется "расширением буфера".
    При использовании оператора сложения + для конкатенации строк в Go 
    каждая операция конкатенации создает новую строку, копируя содержимое двух исходных строк и объединяя их в новую строку


2. Чем отличаются RWMutex от Mutex?
В языке программирования Go sync.Mutex и sync.RWMutex представляют 
два различных механизма синхронизации доступа к общим данным в многопоточной среде.

Mutex (Mutual Exclusion):

sync.Mutex - это простой мьютекс, который обеспечивает эксклюзивный доступ к общему ресурсу. 
Когда горутина блокирует мьютекс с помощью Lock(), она получает эксклюзивное право на доступ к 
критической секции кода, и другие горутины, пытающиеся получить доступ к этой секции, будут
 заблокированы до тех пор, пока первая горутина не освободит мьютекс вызовом Unlock().

RWMutex (Read-Write Mutex):

sync.RWMutex обеспечивает более гибкий механизм синхронизации. В отличие от обычного мьютекса, RWMutex позволяет множеству горутин получать доступ к общему ресурсу для чтения одновременно, но только одной горутине разрешается запись. Горутины, запрашивающие доступ на чтение, могут вызывать метод RLock(), а горутины, запрашивающие доступ на запись, должны вызывать метод Lock().
 Метод RLock() блокирует мьютекс только для чтения, поэтому множеству горутин разрешается одновременно 
 читать общие данные. Однако, если какая-либо горутина вызывает RLock(), то другие горутины, 
 пытающиеся получить доступ для записи через Lock(), будут заблокированы.

Выбор между Mutex и RWMutex зависит от специфики приложения. Если большинство 
операций над данными являются операциями чтения, и операции записи происходят реже, то RWMutex 
может быть более эффективным выбором, поскольку он позволяет параллельное чтение. Однако, если 
операции записи происходят чаще, или если требуется гарантировать эксклюзивный доступ к данным, 
лучше использовать обычный Mutex.


3. Какой размер у структуры struct{}{}?
В Go пустая структура, такая как struct{}{}, не имеет полей, и ее размер равен 0. 
Тем не менее, даже пустая структура будет иметь размер, равный хотя бы 1 байту, чтобы 
обеспечить уникальность адреса каждой переменной, созданной с использованием этой структуры. 
Это требование обеспечивает то, что две разные переменные 
типа пустой структуры всегда будут иметь разные адреса в памяти.


5. В чем разница make и new?
основное различие между make и new заключается в том, что make используется для 
инициализации слайсов, мап и каналов, тогда как new используется для выделения 
памяти для новых экземпляров типов данных и возвращает указатель на них.